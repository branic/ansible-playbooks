---
- name: Update CRC
  hosts: laptop

  tasks:
    - name: Check if CRC binary installed
      ansible.builtin.stat:
        path: "{{ ansible_user_dir }}/.local/bin/crc"
      register: crc_cli_installed

    - name: Check CRC Versions (Block)
      when: crc_cli_installed.stat.exists
      block:
        - name: Retrieve latest CRC release
          ansible.builtin.uri:
            url: https://api.github.com/repos/crc-org/crc/releases?per_page=1
          register: crc_latest_release

        - name: Determine latest CRC version
          ansible.builtin.set_fact:
            latest_crc_ver: "{{ crc_latest_release.json[0]['tag_name'] | regex_replace('^v((?:\\d+\\.?){1,3})$', '\\1') }}"

        - name: Retrieve installed CRC version
          ansible.builtin.command:
            cmd: crc version
          register: crc_ver_installed_result
          changed_when: false

        - name: Determine installed CRC version
          ansible.builtin.set_fact:
            installed_crc_ver: "{{ crc_ver_installed_result.stdout | regex_replace('(?ms)^CRC version: ((?:\\d+\\.?){1,3}).*$', '\\1') }}"

    - name: Display CRC version info
      ansible.builtin.debug:
        msg: |
          [
            "Installed Version: {{ installed_crc_ver | default('NOT INSTALLED') }}",
            "Latest Version:    {{ latest_crc_ver }}",
          ]
        verbosity: 1

    - name: Update CRC executable (block)
      when: (not crc_cli_installed.stat.exists) or (installed_crc_ver != latest_crc_ver)
      block:

        - name: Update CRC executable
          ansible.builtin.unarchive:
            src: https://developers.redhat.com/content-gateway/rest/mirror/pub/openshift-v4/clients/crc/latest/crc-linux-amd64.tar.xz
            dest: "{{ ansible_user_dir }}/.local/bin"
            remote_src: true
            include:
              - "*crc"
            extra_opts:
              - "--strip-components=1"

        - name: Remove previous CRC VM
          ansible.builtin.expect:
            command: crc delete
            responses:
              (.*)delete the instance(.*): "y"
          register: crc_vm_deleted
          changed_when: crc_vm_deleted['stdout'] is search("Deleted the instance")
          failed_when: crc_vm_deleted['rc'] not in [0, 1]

        - name: Setup CRC
          ansible.builtin.command:
            cmd: crc setup
          register: crc_vm_setup
          changed_when: crc_vm_setup['stderr'] is regex("Getting|Installing|Downloading|Uncompressing", multiline=true, ignorecase=true)

        - name: Determine bundle version
          ansible.builtin.set_fact:
            bundle_version: "{{ crc_vm_setup['stderr'] | regex_replace('(?ms)^.*Checking .+/(crc_.+).crcbundle exists.*$', '\\1') }}"

        - name: Determine bundles path
          ansible.builtin.set_fact:
            bundles_path: "{{ crc_vm_setup['stderr'] | regex_replace('(?ms)^.*Checking if (/.+)/crc_.+.crcbundle exists.*$', '\\1') }}"

        - name: Find cached bundles
          ansible.builtin.find:
            paths:
              - "{{ bundles_path }}"
            file_type: any
          register: crc_bundles

        - name: Remove old bundles
          ansible.builtin.file:
            path: "{{ bundle.path }}"
            state: absent
          loop: "{{ crc_bundles['files'] }}"
          loop_control:
            loop_var: "bundle"
            label: "{{ bundle.path }}"
          when: bundle.path is not search(bundle_version)

    - name: Add crc command-line completion to .bashrc
      ansible.builtin.lineinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        line: source <(crc completion bash)
